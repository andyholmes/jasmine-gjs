--- jasmine.js.orig	2020-09-07 13:39:54.145681565 -0700
+++ jasmine.js	2020-09-07 14:10:12.121436940 -0700
@@ -280,7 +281,7 @@
   };
 
   j$.isAsymmetricEqualityTester_ = function(obj) {
-    return obj ? j$.isA_('Function', obj.asymmetricMatch) : false;
+    return obj && obj.asymmetricMatch ? j$.isA_('Function', obj.asymmetricMatch) : false;
   };
 
   j$.getType_ = function(value) {
@@ -500,7 +501,7 @@
   };
 
   j$.isSpy = function(putativeSpy) {
-    if (!putativeSpy) {
+    if (!putativeSpy || !putativeSpy.and) {
       return false;
     }
     return (
@@ -1067,7 +1068,7 @@
     };

     var currentSuite = function() {
-      return currentlyExecutingSuites[currentlyExecutingSuites.length - 1];
+      return currentlyExecutingSuites[currentlyExecutingSuites.length - 1] || undefined;
     };

     var currentRunnable = function() {
@@ -3015,7 +3016,7 @@
       Function.prototype.apply.apply(realSetTimeout, [global, [fn, 0]]);
     };

-    if (j$.isFunction_(global.setImmediate)) {
+    if (global.setImmediate && j$.isFunction_(global.setImmediate)) {
       var realSetImmediate = global.setImmediate;
       return function(fn) {
         currentCallCount++;
@@ -3028,7 +3029,7 @@
           setTimeoutImpl(fn);
         }
       };
-    } else if (!j$.util.isUndefined(global.MessageChannel)) {
+    } else if (global.MessageChannel && !j$.util.isUndefined(global.MessageChannel)) {
       return messageChannelImpl(global, setTimeoutImpl);
     } else {
       return setTimeoutImpl;
@@ -3524,7 +3525,7 @@
       stackTrace.frames.forEach(function(frame) {
         if (frame.file && frame.file !== jasmineFile) {
           result.push(frame.raw);
-        } else if (result[result.length - 1] !== jasmineMarker) {
+        } else if (result.length && result[result.length - 1] !== jasmineMarker) {
           result.push(jasmineMarker);
         }
       });
@@ -3777,7 +3778,7 @@
   };
 
   ExpectationFilterChain.prototype.selectComparisonFunc = function(matcher) {
-    return this.callFirst_('selectComparisonFunc', arguments).result;
+    return this.callFirst_('selectComparisonFunc', arguments).result || undefined;
   };

   ExpectationFilterChain.prototype.buildFailureMessage = function(
@@ -3786,7 +3787,7 @@
     args,
     matchersUtil
   ) {
-    return this.callFirst_('buildFailureMessage', arguments).result;
+    return this.callFirst_('buildFailureMessage', arguments).result || undefined;
   };
 
   ExpectationFilterChain.prototype.modifyFailureMessage = function(msg) {
